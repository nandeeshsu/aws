pipeline {
    agent any
    options {
        skipStagesAfterUnstable()
    }

//     environment {
//         AWS_CREDENTIALS = credentials('cloud_user')
//     }

    parameters {
        string(name: 'ECR_REPO_URL', defaultValue: 'NONE', description: 'AWS ECR Repository HTTP URL')
    }
    stages {
         /* stage('Clone repository') {
            steps {
                script{
                checkout scm
                }
            }
        } */

        stage('Code Build') {
            steps {
                script{
                    dir('ecs/demo-ecs') {
                        sh './gradlew clean build -x test --no-daemon' //run a gradle task
                    }
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                script{
                    dir('ecs/demo-ecs') {
                        app = docker.build("nandeeshsu/demo_ecs")
                    }
                }
            }
        }

        stage('Test'){
            steps {
                 echo 'Empty'
            }
        }

        stage('Deploy') {
            steps {
                script{
                    docker.withRegistry("${params.ECR_REPO_URL}", 'ecr:us-east-1:cloud_user') {
                        //app.push("${params.ECR_REPO_URL}/demo_ecs")
                        app.push("latest")
                    }
                }
            }
        }

        stage('Image Scanning') {
            steps {
                script{
                    withAWS(credentials:'cloud_user', region: 'us-east-1'){
                        //Grab the imageDigest of the latest image with the tag test
                        def digest_image = sh(
                            script: "aws ecr describe-images --repository-name nandeeshsu/demo_ecs --image-ids imageTag=latest --query 'imageDetails[0].imageDigest'",
                            returnStdout: true
                        ).trim()

                        def start_image_scan_result = sh(
                            script: "aws ecr start-image-scan --repository-name nandeeshsu/demo_ecs --no-paginate --image-id imageDigest=$digest_image",
                            returnStdout: true
                        ).trim()
                        //writeFile file: "start_image_scan_result.txt", text: start_image_scan_result

                        // Wait for the image scan to complete
                        sh "aws ecr wait image-scan-complete --repository-name nandeeshsu/demo_ecs --image-id imageDigest=$digest_image"

//                         def scan_findings = sh(
//                             script: "aws ecr describe-image-scan-findings --repository-name nandeeshsu/demo_ecs --no-paginate --image-id imageDigest=$digest_image",
//                             returnStdout: true
//                         ).trim()
//                         writeFile file: "scan_findings.txt", text: scan_findings

                        if [ $(echo $?) -eq 0 ]; then
                          SCAN_FINDINGS=$(aws ecr describe-image-scan-findings --repository-name nandeeshsu/demo_ecs --image-id imageDigest=$digest_image | jq '.imageScanFindings.findingSeverityCounts')
                          CRITICAL=$(echo $SCAN_FINDINGS | jq '.CRITICAL')
                          HIGH=$(echo $SCAN_FINDINGS | jq '.HIGH')
                          MEDIUM=$(echo $SCAN_FINDINGS | jq '.MEDIUM')
                          LOW=$(echo $SCAN_FINDINGS | jq '.LOW')
                          INFORMATIONAL=$(echo $SCAN_FINDINGS | jq '.INFORMATIONAL')
                          UNDEFINED=$(echo $SCAN_FINDINGS | jq '.UNDEFINED')
                          if [ $CRITICAL != null ] || [ $HIGH != null ]; then
                            echo Docker image contains vulnerabilities at CRITICAL or HIGH
                            exit 1  #exit execution due to docker image vulnerabilities
                          fi
                        fi
                    }
                }
            }
        }
    }
}