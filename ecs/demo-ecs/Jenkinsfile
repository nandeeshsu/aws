pipeline {
    agent any
    options {
        skipStagesAfterUnstable()
    }

//     environment {
//         AWS_CREDENTIALS = credentials('cloud_user')
//     }

    parameters {
        string(name: 'ECR_REPO_URL', defaultValue: 'NONE', description: 'AWS ECR Repository HTTP URL')
    }
    stages {
         /* stage('Clone repository') {
            steps {
                script{
                checkout scm
                }
            }
        } */

        stage('Code Build') {
            steps {
                script{
                    dir('ecs/demo-ecs') {
                        sh './gradlew clean build -x test --no-daemon' //run a gradle task
                    }
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                script{
                    dir('ecs/demo-ecs') {
                        app = docker.build("nandeeshsu/demo_ecs")
                    }
                }
            }
        }

        stage('Test'){
            steps {
                 echo 'Empty'
            }
        }

        stage('Deploy') {
            steps {
                script{
                    docker.withRegistry("${params.ECR_REPO_URL}", 'ecr:us-east-1:cloud_user') {
                        //app.push("${params.ECR_REPO_URL}/demo_ecs")
                        def pushOutput = app.push("latest")

                        // Extract SHA digest from the push output
                        def imageShaDigest = pushOutput =~ /digest: sha256:(\w+)/ ? "sha256:${it[0][1]}" : null

                        if (imageShaDigest != null) {
                            echo "Image SHA Digest: ${imageShaDigest}"
                        } else {
                            error("Failed to extract the SHA digest from the push output.")
                        }
                    }
                }
            }
        }

        stage('Image Scanning') {
            steps {
                script{
                    withAWS(credentials:'cloud_user', region: 'us-east-1'){
                        //Grab the imageDigest of the latest image with the tag test
                        def digest_image = sh(
                            script: "aws ecr describe-images --repository-name nandeeshsu/demo_ecs --image-ids imageTag=latest --query 'imageDetails[0].imageDigest'",
                            returnStdout: true
                        ).trim()

                        def start_image_scan_result = sh(
                            script: "aws ecr start-image-scan --repository-name nandeeshsu/demo_ecs --no-paginate --image-id imageDigest=$digest_image",
                            returnStdout: true
                        ).trim()
                        //writeFile file: "start_image_scan_result.txt", text: start_image_scan_result

                        // Wait for the image scan to complete
                        sh "aws ecr wait image-scan-complete --repository-name nandeeshsu/demo_ecs --image-id imageDigest=$digest_image"

                        def SEVERITY_COUNTS = sh(
                            script: "aws ecr describe-image-scan-findings --repository-name nandeeshsu/demo_ecs --no-paginate --image-id imageDigest=$digest_image | jq '.imageScanFindings.findingSeverityCounts'",
                            returnStdout: true
                        ).trim()
//                      writeFile file: "scan_findings.txt", text: SCAN_FINDINGS

                        echo "SEVERITY_COUNTS: ${SEVERITY_COUNTS}"

                        def CRITICAL = sh(
                            script: "echo '${SEVERITY_COUNTS}' | jq '.CRITICAL'",
                            returnStdout: true
                        ).trim()
                        echo "CRITICAL: ${CRITICAL}"

                      def HIGH = sh(
                        script: "echo '${SEVERITY_COUNTS}' | jq '.HIGH'",
                        returnStdout: true
                      ).trim()
                      echo "HIGH: ${HIGH}"

                      def MEDIUM = sh(
                        script: "echo '${SEVERITY_COUNTS}' | jq '.MEDIUM'",
                        returnStdout: true
                      ).trim()
                        echo "MEDIUM: ${MEDIUM}"

                      def LOW = sh(
                        script: "echo '${SEVERITY_COUNTS}' | jq '.LOW'",
                        returnStdout: true
                      ).trim()
                      echo "LOW: ${LOW}"

                      def INFORMATIONAL = sh(
                        script: "echo '${SEVERITY_COUNTS}' | jq '.INFORMATIONAL'",
                        returnStdout: true
                      ).trim()
                      echo "INFORMATIONAL: ${INFORMATIONAL}"

                      def UNDEFINED = sh(
                        script: "echo '${SEVERITY_COUNTS}' | jq '.UNDEFINED'",
                        returnStdout: true
                      ).trim()
                      echo "UNDEFINED: ${UNDEFINED}"

                      if ( CRITICAL != null || HIGH != null ) {
                        echo "Docker image contains vulnerabilities at CRITICAL or HIGH"
                        error('Exiting execution due to docker image vulnerabilities')  //exit execution due to docker image vulnerabilities
                      }
                    }
                }
            }
        }
    }
    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    cleanWhenFailure: true,
                    cleanWhenAborted: true,
                    cleanWhenSuccess: true,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}